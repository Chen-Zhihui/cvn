/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QueryService_H
#define QueryService_H

#include <iosfwd>
#include <vector>
#include <exception>
#include <memory>
#include <nmslib/params.h>

namespace similarity {

typedef std::vector<class ReplyEntry>  ReplyEntryList;

class ReplyEntry;


class ReplyEntry {
 public:

  ReplyEntry(const ReplyEntry&);
  ReplyEntry& operator=(const ReplyEntry&);
  ReplyEntry() : id(0), dist(0), externId(), obj() {
  }

  virtual ~ReplyEntry() throw();

  int32_t id;
  double dist;
  std::string externId;
  std::string obj;

  void __set_id(const int32_t val);

  void __set_dist(const double val);

  void __set_externId(const std::string& val);

  void __set_obj(const std::string& val);

  bool operator == (const ReplyEntry & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(dist == rhs.dist))
      return false;
    return true;
  }
  bool operator != (const ReplyEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplyEntry & ) const;

  friend std::ostream& operator<<(std::ostream& out, const ReplyEntry& obj);
};

void swap(ReplyEntry &a, ReplyEntry &b);


class QueryServiceIf {
 public:
  virtual ~QueryServiceIf() {}
  virtual void setQueryTimeParams(const std::string& queryTimeParams) = 0;
  virtual void knnQuery(ReplyEntryList& _return, const int32_t k, const std::string& queryObj, const bool retExternId, const bool retObj) = 0;
  virtual void rangeQuery(ReplyEntryList& _return, const double r, const std::string& queryObj, const bool retExternId, const bool retObj) = 0;
  virtual double getDistance(const std::string& obj1, const std::string& obj2) = 0;
};

std::unique_ptr<QueryServiceIf> createQueryService(
    std::string DistType,
    bool debugPrint,
    const std::string &SpaceType,
    const AnyParams &SpaceParams,
    const std::string &DataFile,
    unsigned int MaxNumData,
    const std::string &MethodName,
    const std::string &LoadIndexLoc,
    const std::string &SaveIndexLoc,
    const AnyParams &IndexParams,
    const AnyParams &QueryTimeParams);

} // namespace

#endif
